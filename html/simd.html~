<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><!-- Global site tag (gtag.js) - Google Analytics --><script async src="https://www.googletagmanager.com/gtag/js?id=UA-31377772-3"></script><script>  window.dataLayer = window.dataLayer || [];  function gtag(){dataLayer.push(arguments);}  gtag('js', new Date());  gtag('config', 'UA-31377772-3');</script>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>SIMD</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="maypeppa" />
<link rel="shortcut icon" href="/themes/favicon.ico" /><link rel="stylesheet" type="text/css" href="/themes/styles/readtheorg/css/htmlize.css"/><link rel="stylesheet" type="text/css" href="/themes/styles/readtheorg/css/readtheorg.css"/><script src="https://ajax.loli.net/ajax/libs/jquery/2.1.3/jquery.min.js"></script><script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script><script type="text/javascript" src="/themes/styles/lib/js/jquery.stickytableheaders.min.js"></script><script type="text/javascript" src="/themes/styles/readtheorg/js/readtheorg.js"></script></head>
<body>
<div id="content">
<h1 class="title">SIMD</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orge234cbb">1. 指令集</a>
<ul>
<li><a href="#org1dfd29c">1.1. MMX</a></li>
<li><a href="#org151bf9f">1.2. SSE.</a></li>
<li><a href="#orgfbf76a3">1.3. SSE2</a></li>
<li><a href="#orgf05b28b">1.4. SSE3</a></li>
<li><a href="#org789b05f">1.5. SSSE3</a></li>
<li><a href="#org1de154f">1.6. SSE4</a></li>
<li><a href="#orgcf31519">1.7. 检测代码</a></li>
</ul>
</li>
<li><a href="#org48a08c9">2. 基本概念</a>
<ul>
<li><a href="#org6582278">2.1. %mm寄存器</a></li>
<li><a href="#org6018457">2.2. %xmm寄存器</a></li>
<li><a href="#org69f4063">2.3. %mxcsr寄存器</a></li>
<li><a href="#org4c1fc83">2.4. Saturation &amp; Wraparound</a></li>
<li><a href="#orgb266ee9">2.5. General Purpose Register(GPR)</a></li>
<li><a href="#orge9df57a">2.6. X87 FPU</a></li>
<li><a href="#orgd0075a0">2.7. Packed &amp; Scalar Instructions</a></li>
<li><a href="#org8ecc42d">2.8. Temporal &amp; NonTemporal Data</a></li>
<li><a href="#org7bdc8c0">2.9. Alignment</a></li>
<li><a href="#orgdf1bcbe">2.10. Asymmetric &amp; Horizontal Processing</a></li>
<li><a href="#orgc38c18f">2.11. Zero Fill &amp; Truncated</a></li>
</ul>
</li>
<li><a href="#org5d77641">3. 指令</a></li>
</ul>
</div>
</div>
<p>
Intel® 64 and IA-32 Architectures Software Developer Manuals | Intel® Software - <a href="https://software.intel.com/en-us/articles/intel-sdm">https://software.intel.com/en-us/articles/intel-sdm</a>
</p>

<div id="outline-container-orge234cbb" class="outline-2">
<h2 id="orge234cbb"><span class="section-number-2">1</span> 指令集</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org1dfd29c" class="outline-3">
<h3 id="org1dfd29c"><span class="section-number-3">1.1</span> MMX</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Multimedia Extensions.[PII &amp; PMMX]</li>
<li>(CPUID.01H:EDX.MMX[bit 23]=1)</li>
</ul>
</div>
</div>

<div id="outline-container-org151bf9f" class="outline-3">
<h3 id="org151bf9f"><span class="section-number-3">1.2</span> SSE.</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>Streaming SIMD Extensions.[PIII]</li>
<li>(CPUID.01H:EDX.SSE[bit 25]=1)</li>
</ul>
</div>
</div>

<div id="outline-container-orgfbf76a3" class="outline-3">
<h3 id="orgfbf76a3"><span class="section-number-3">1.3</span> SSE2</h3>
<div class="outline-text-3" id="text-1-3">
<ul class="org-ul">
<li>Streaming SIMD Extensions2.[P4 &amp; Xeon]</li>
<li>(CPUID.01H:EDX.SSE2[bit 26]=1)</li>
</ul>
</div>
</div>

<div id="outline-container-orgf05b28b" class="outline-3">
<h3 id="orgf05b28b"><span class="section-number-3">1.4</span> SSE3</h3>
<div class="outline-text-3" id="text-1-4">
<ul class="org-ul">
<li>Streaming SIMD Extensions3.[P4(HT)]</li>
<li>(CPUID.01H:ECX.SSE3[bit 0]=1)</li>
</ul>
</div>
</div>

<div id="outline-container-org789b05f" class="outline-3">
<h3 id="org789b05f"><span class="section-number-3">1.5</span> SSSE3</h3>
<div class="outline-text-3" id="text-1-5">
<ul class="org-ul">
<li>Supplemental Stream SIMD Extensions3.[Xeon(5100) &amp; Core2]</li>
<li>(CPUID.01H:ECX.SSSE3[bit 9]=1)</li>
</ul>
</div>
</div>

<div id="outline-container-org1de154f" class="outline-3">
<h3 id="org1de154f"><span class="section-number-3">1.6</span> SSE4</h3>
<div class="outline-text-3" id="text-1-6">
<ul class="org-ul">
<li>Streaming SIMD Extensions4.[Xeon(5400) &amp; Core2Ex(QX9650)]</li>
<li>SSE4.1.(CPUID.01H:ECX.SSE4_1[bit 19]=1)</li>
<li>SSE4.2.(CPUID.01H:ECX.SSE4_2[bit 20]=1)</li>
</ul>
</div>
</div>

<div id="outline-container-orgcf31519" class="outline-3">
<h3 id="orgcf31519"><span class="section-number-3">1.7</span> 检测代码</h3>
<div class="outline-text-3" id="text-1-7">
<div class="org-src-container">
<pre class="src src-C++"><span class="org-preprocessor">#include</span> <span class="org-string">&lt;stdio.h&gt;</span>
<span class="org-type">int</span> <span class="org-function-name">check_support_mmx</span>(){
    <span class="org-type">int</span> <span class="org-variable-name">res</span>=0;
    <span class="org-keyword">__asm__</span> __volatile__(
        <span class="org-string">"movl $1,%%eax\n\t"</span>
        <span class="org-string">"cpuid\n\t"</span>
        <span class="org-string">"test $0x800000,%%edx\n\t"</span>
        <span class="org-string">"jz 1f\n\t"</span>
        <span class="org-string">"movl $1,%0\n\t"</span>
        <span class="org-string">"1:\n\t"</span>
        :<span class="org-string">"=m"</span>(res)
        ::<span class="org-string">"eax"</span>,<span class="org-string">"edx"</span>);
    <span class="org-keyword">return</span> res;
}
<span class="org-type">int</span> <span class="org-function-name">check_support_sse</span>(){
    <span class="org-type">int</span> <span class="org-variable-name">res</span>=0;
    <span class="org-keyword">__asm__</span> __volatile__(
        <span class="org-string">"movl $1,%%eax\n\t"</span>
        <span class="org-string">"cpuid\n\t"</span>
        <span class="org-string">"test $0x02000000,%%edx\n\t"</span>
        <span class="org-string">"jz 1f\n\t"</span>
        <span class="org-string">"movl $1,%0\n\t"</span>
        <span class="org-string">"1:\n\t"</span>
        :<span class="org-string">"=m"</span>(res)
        ::<span class="org-string">"eax"</span>,<span class="org-string">"edx"</span>);
    <span class="org-keyword">return</span> res;
}
<span class="org-type">int</span> <span class="org-function-name">check_support_sse2</span>(){
    <span class="org-type">int</span> <span class="org-variable-name">res</span>=0;
    <span class="org-keyword">__asm__</span> __volatile__(
        <span class="org-string">"movl $1,%%eax\n\t"</span>
        <span class="org-string">"cpuid\n\t"</span>
        <span class="org-string">"test $0x04000000,%%edx\n\t"</span>
        <span class="org-string">"jz 1f\n\t"</span>
        <span class="org-string">"movl $1,%0\n\t"</span>
        <span class="org-string">"1:\n\t"</span>
        :<span class="org-string">"=m"</span>(res)
        ::<span class="org-string">"eax"</span>,<span class="org-string">"edx"</span>);
    <span class="org-keyword">return</span> res;
}
<span class="org-type">int</span> <span class="org-function-name">check_support_sse3</span>(){
    <span class="org-type">int</span> <span class="org-variable-name">res</span>=0;
    <span class="org-keyword">__asm__</span> __volatile__(
        <span class="org-string">"movl $1,%%eax\n\t"</span>
        <span class="org-string">"cpuid\n\t"</span>
        <span class="org-string">"test $0x1,%%ecx\n\t"</span>
        <span class="org-string">"jz 1f\n\t"</span>
        <span class="org-string">"movl $1,%0\n\t"</span>
        <span class="org-string">"1:\n\t"</span>
        :<span class="org-string">"=m"</span>(res)
        ::<span class="org-string">"eax"</span>,<span class="org-string">"edx"</span>);
    <span class="org-keyword">return</span> res;
}
<span class="org-type">int</span> <span class="org-function-name">check_support_ssse3</span>(){
    <span class="org-type">int</span> <span class="org-variable-name">res</span>=0;
    <span class="org-keyword">__asm__</span> __volatile__(
        <span class="org-string">"movl $1,%%eax\n\t"</span>
        <span class="org-string">"cpuid\n\t"</span>
        <span class="org-string">"test $0x0200,%%ecx\n\t"</span>
        <span class="org-string">"jz 1f\n\t"</span>
        <span class="org-string">"movl $1,%0\n\t"</span>
        <span class="org-string">"1:\n\t"</span>
        :<span class="org-string">"=m"</span>(res)
        ::<span class="org-string">"eax"</span>,<span class="org-string">"edx"</span>);
    <span class="org-keyword">return</span> res;
}
<span class="org-type">int</span> <span class="org-function-name">check_support_sse4_1</span>(){
    <span class="org-type">int</span> <span class="org-variable-name">res</span>=0;
    <span class="org-keyword">__asm__</span> __volatile__(
        <span class="org-string">"movl $1,%%eax\n\t"</span>
        <span class="org-string">"cpuid\n\t"</span>
        <span class="org-string">"test $0x80000,%%ecx\n\t"</span>
        <span class="org-string">"jz 1f\n\t"</span>
        <span class="org-string">"movl $1,%0\n\t"</span>
        <span class="org-string">"1:\n\t"</span>
        :<span class="org-string">"=m"</span>(res)
        ::<span class="org-string">"eax"</span>,<span class="org-string">"edx"</span>);
    <span class="org-keyword">return</span> res;
}
<span class="org-type">int</span> <span class="org-function-name">check_support_sse4_2</span>(){
    <span class="org-type">int</span> <span class="org-variable-name">res</span>=0;
    <span class="org-keyword">__asm__</span> __volatile__(
        <span class="org-string">"movl $1,%%eax\n\t"</span>
        <span class="org-string">"cpuid\n\t"</span>
        <span class="org-string">"test $0x0100000,%%ecx\n\t"</span>
        <span class="org-string">"jz 1f\n\t"</span>
        <span class="org-string">"movl $1,%0\n\t"</span>
        <span class="org-string">"1:\n\t"</span>
        :<span class="org-string">"=m"</span>(res)
        ::<span class="org-string">"eax"</span>,<span class="org-string">"edx"</span>);
    <span class="org-keyword">return</span> res;
}
<span class="org-type">int</span> <span class="org-function-name">main</span>(){
    printf(<span class="org-string">"MMX[%s]\n"</span>,check_support_mmx()?<span class="org-string">"OK"</span>:<span class="org-string">"FAILED"</span>);
    printf(<span class="org-string">"SSE[%s]\n"</span>,check_support_sse()?<span class="org-string">"OK"</span>:<span class="org-string">"FAILED"</span>);
    printf(<span class="org-string">"SSE2[%s]\n"</span>,check_support_sse2()?<span class="org-string">"OK"</span>:<span class="org-string">"FAILED"</span>);
    printf(<span class="org-string">"SSE3[%s]\n"</span>,check_support_sse3()?<span class="org-string">"OK"</span>:<span class="org-string">"FAILED"</span>);
    printf(<span class="org-string">"SSSE3[%s]\n"</span>,check_support_ssse3()?<span class="org-string">"OK"</span>:<span class="org-string">"FAILED"</span>);
    printf(<span class="org-string">"SSE4.1[%s]\n"</span>,check_support_sse4_1()?<span class="org-string">"OK"</span>:<span class="org-string">"FAILED"</span>);
    printf(<span class="org-string">"SSE4.2[%s]\n"</span>,check_support_sse4_2()?<span class="org-string">"OK"</span>:<span class="org-string">"FAILED"</span>);
    <span class="org-keyword">return</span> 0;
}

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org48a08c9" class="outline-2">
<h2 id="org48a08c9"><span class="section-number-2">2</span> 基本概念</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org6582278" class="outline-3">
<h3 id="org6582278"><span class="section-number-3">2.1</span> %mm寄存器</h3>
<div class="outline-text-3" id="text-2-1">
<p>
%mm寄存器是64bit,共有8个%mm寄存器.需要注意的是,%mm0-%mm7是X87 FPU寄存器的alias,
分别对应%r0-%r7.所以对%mm0-%mm7的操作会覆盖X87 FPU的内容.使用%mm寄存器的时候,
效果是这样的.
</p>
<ol class="org-ol">
<li>TOS(Top Of Stack)会被置为0,也就是FPU registers的顶部会置0.</li>
<li>整个FPU tag word会被置为valid(0x0).如果后续想使用的话,需要使用EMMS指令.</li>
<li>FPU register有80位,但是%mm寄存器只是用了64位,因此其余位填充(0xff).</li>
</ol>

<p>
因此如果在使用%mm寄存器之后,想使用FPU指令的话,那么应该
</p>
<ol class="org-ol">
<li>fsave/fxsave保存FPU状态.</li>
<li>执行EMMS指令.</li>
<li>可选地使用frstore/fxstore载入之前FPU状态.</li>
<li>执行FPU指令.</li>
</ol>

<p>
如果使用FPU指令之后,想切换回%mm寄存器的话.
</p>
<ol class="org-ol">
<li>fsave/fxsave保存FPU状态.</li>
<li>可选地使用frstore/fxrstore载入之前FPU状态.</li>
<li>操作%mm寄存器.</li>
</ol>

<p>
EMMS指令会清除MMX的状态,将FPU tag word进行清空,表示所有的FPU registers都已经清空.
我们必须在执行完成MMX指令之后,如果之后需要使用FPU registers的话,那么需要执行这个指令.
</p>
</div>
</div>

<div id="outline-container-org6018457" class="outline-3">
<h3 id="org6018457"><span class="section-number-3">2.2</span> %xmm寄存器</h3>
<div class="outline-text-3" id="text-2-2">
<p>
%xmm寄存器是128bit.
Intel64架构下允许访问16个%xmm寄存器.
IA-32架构下只允许访问8个%xmm寄存器.
</p>
</div>
</div>

<div id="outline-container-org69f4063" class="outline-3">
<h3 id="org69f4063"><span class="section-number-3">2.3</span> %mxcsr寄存器</h3>
<div class="outline-text-3" id="text-2-3">
<p>
%mxcsr是32bit.%mxcsr寄存器是在SSE指令集引入的,用来控制作用在%xmm寄存器操作的行为,
所有的这些行为都是和浮点相关的,在某种程度上非常类似于X87 FPU tag word.
关于%mxcsr寄存器各个位所表示的意思在这里不细说,可以查看Intel手册得到详细解释.
可以查看Intel Vol.1 10.2.3.%mxcrs默认值是0x1f80.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">指令</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">LDMXCSR</td>
<td class="org-left">mem-&gt;%mxcsr.32bit</td>
</tr>

<tr>
<td class="org-left">STMXCSR</td>
<td class="org-left">%mxcsr-&gt;mem.32bit</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-org4c1fc83" class="outline-3">
<h3 id="org4c1fc83"><span class="section-number-3">2.4</span> Saturation &amp; Wraparound</h3>
<div class="outline-text-3" id="text-2-4">
<p>
在进行整数运算的时候,可能会存在out-of-range的情况,结果不能够被目标数所表示.对于
这种溢出处理有下面3种方式.
</p>
<ul class="org-ul">
<li>Wraparound Arithmetic.</li>
</ul>
<p>
回绕模式.比如8个字节表示257的话,那么就是257-256=1.
</p>
<ul class="org-ul">
<li>Signed Saturation Arithmetic.</li>
</ul>
<p>
符号位溢出模式.比如8个字节表示257的话,那么会是0x7f=127.
</p>
<ul class="org-ul">
<li>Unsigned Saturation Arithmetic.</li>
</ul>
<p>
无符号溢出模式.比如8个字节表示257的话,那么会是0xff=255.
</p>

<p>
对于溢出模式对于一些计算是非常重要的.假设256色的像素如果两个像素相叠加的话,
当然不希望像素值发生回绕.如果溢出的话,通常这个像素保持纯黑或者是纯白.
</p>
</div>
</div>

<div id="outline-container-orgb266ee9" class="outline-3">
<h3 id="orgb266ee9"><span class="section-number-3">2.5</span> General Purpose Register(GPR)</h3>
<div class="outline-text-3" id="text-2-5">
<p>
通用寄存器,包括EAX/RAX,EBX/RBX,ECX/RCX等.这些通用寄存器和%mm和%xmm之间的差别是,
%mm和%xmm不能够用来存放地址,也就是说不能够将内存地址存放在%mm和%xmm里面然后进行引用.
</p>
</div>
</div>

<div id="outline-container-orge9df57a" class="outline-3">
<h3 id="orge9df57a"><span class="section-number-3">2.6</span> X87 FPU</h3>
<div class="outline-text-3" id="text-2-6">
<p>
X87 FPU是浮点运算部件,共有8个寄存器,组织方式是堆栈.通常来说对于SIMD并不需要关心
X87 FPU这个部件.但是因为SIMD使用的%mm寄存器是FPU寄存器的alias,所以我们这里需要了解.
后面我们把X87 FPU都称为FPU.
</p>

<p>
对于FPU会有一个状态,状态包括执行环境和寄存器内容.每个寄存器80bit.在操作%mm寄存器
和执行FPU指令切换之间,我们可能需要保存状态.那么下面就是关于FPU操作状态的指令.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">指令</th>
<th scope="col" class="org-left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">FSAVE</td>
<td class="org-left">保存FPU状态,然后重新初始化FPU.84/108字节</td>
</tr>

<tr>
<td class="org-left">FRSTORE</td>
<td class="org-left">FSAVE逆操作.</td>
</tr>

<tr>
<td class="org-left">FXSAVE</td>
<td class="org-left">保存FPU状态/%mm寄存器,%xmm寄存器,%mxscr寄存器.512字节.</td>
</tr>

<tr>
<td class="org-left">FXRSTORE</td>
<td class="org-left">FXSAVE逆操作.</td>
</tr>
</tbody>
</table>

<p>
关于如何协调%mm寄存器和FPU寄存器的使用,在%mm寄存器这节有解释.
</p>
</div>
</div>

<div id="outline-container-orgd0075a0" class="outline-3">
<h3 id="orgd0075a0"><span class="section-number-3">2.7</span> Packed &amp; Scalar Instructions</h3>
<div class="outline-text-3" id="text-2-7">
<p>
对于SIMD提供了操作packed和scalar指令.我们假设存在两个操作数,
假设是(f00,f01,f02,f03)和(f10,f11,f12,f13)的话,那么
</p>
<ul class="org-ul">
<li>如果是packed操作的话,那么操作是(f00 op f01,f01 op f11,f02 op f12,f03 op f13).</li>
<li>如果是scalar操作的话,那么操作是(f00,f01,f03,f03 op f13).</li>
</ul>
<p>
也就是说,如果在scalar操作的话,仅仅是操作最后面一个单元,其他单元全部复制.
</p>

<p>
需要注意的是,在Scalar操作下面
</p>
<ul class="org-ul">
<li>单精度浮点是24-bit significand + 8-bit exponent.</li>
<li>双精度浮点是53-bit significand + 11-bit exponent.</li>
</ul>
<p>
而在IEEE-754和FPU操作环境下面的的话
</p>
<ul class="org-ul">
<li>单精度浮点是24-bit significand + 15-bit exponent.</li>
<li>双精度浮点是52-bit significand + 15-bit exponent.</li>
</ul>
<p>
此外SIMD操作浮点数和FPU操作浮点数有些不同,SIMD是直接操作浮点数的Native Format,
而FPU是首先在更高的精度上面操作,然后取舍到Native Format.
</p>
</div>
</div>

<div id="outline-container-org8ecc42d" class="outline-3">
<h3 id="org8ecc42d"><span class="section-number-3">2.8</span> Temporal &amp; NonTemporal Data</h3>
<div class="outline-text-3" id="text-2-8">
<p>
待续.需要阅读Intel Vol.3A Memory &amp; Cache Control这节.在Intel Vol.1 10.4.6.2也有介绍.
</p>
</div>
</div>

<div id="outline-container-org7bdc8c0" class="outline-3">
<h3 id="org7bdc8c0"><span class="section-number-3">2.9</span> Alignment</h3>
<div class="outline-text-3" id="text-2-9">
<p>
关于对齐方面,如果使用128bit Memory Operand必须进行16字节的对齐.但是有些例外
</p>
<ul class="org-ul">
<li>使用UnAlign的Data Transfer操作,比如MOVUPS/MOVUPD.</li>
<li>如果是Scalar Memory Float的话,必须是4字节对齐.</li>
<li>如果是Scalar Memory Double的话,必须是8字节对齐.</li>
<li>此外还有部分指令字节对齐存在例外,会在响应的指令部分说明.</li>
</ul>
</div>
</div>

<div id="outline-container-orgdf1bcbe" class="outline-3">
<h3 id="orgdf1bcbe"><span class="section-number-3">2.10</span> Asymmetric &amp; Horizontal Processing</h3>
<div class="outline-text-3" id="text-2-10">
<p>
分别是对称处理和水平处理.假设存在操作数(a0,a1,a2,a3)以及(b0,b1,b2,b3).
对于大部分SIMD指令处理都是对称处理,也就是(a0 op b0,a1 op b1,a2 op b2,a3 op b3).
相邻处理就是(a0 op a1,a2 op a3,b0 op b1,b2 op b3).
</p>
</div>
</div>

<div id="outline-container-orgc38c18f" class="outline-3">
<h3 id="orgc38c18f"><span class="section-number-3">2.11</span> Zero Fill &amp; Truncated</h3>
<div class="outline-text-3" id="text-2-11">
<p>
对于从内存/寄存器载入到寄存器的话,如果位数不够,通常是占用寄存器的低字节,
除非显式指定.对于寄存器中没有使用的高字节,通常是采用0填充,也就是Zero Fill.:).
</p>

<p>
而另外一个方面,如果从寄存器传输到内存/寄存器,如果寄存器位数过多的话,那么也
通常只是传输寄存器的低字节,而保留寄存器的高字节,也就是Truncated.:).
</p>
</div>
</div>
</div>

<div id="outline-container-org5d77641" class="outline-2">
<h2 id="org5d77641"><span class="section-number-2">3</span> 指令</h2>
<div class="outline-text-2" id="text-3">
<p>
为了方便表示,我们定义下面缩写和操作.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">助记符</th>
<th scope="col" class="org-left">含义</th>
<th scope="col" class="org-left">其他</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">A</td>
<td class="org-left">Aligned</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">U</td>
<td class="org-left">UnAligned</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">L</td>
<td class="org-left">Low</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">H</td>
<td class="org-left">High/Horizontal</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">B</td>
<td class="org-left">Byte</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SB</td>
<td class="org-left">Signed Byte</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">UB</td>
<td class="org-left">Unsigned Byte</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">W</td>
<td class="org-left">Word</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SW</td>
<td class="org-left">Signed Word</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">UW</td>
<td class="org-left">Unsigned Word</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Q</td>
<td class="org-left">Quad Word</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">DQ</td>
<td class="org-left">Double Quad Word</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">F</td>
<td class="org-left">Float</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">D</td>
<td class="org-left">Double</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">PS</td>
<td class="org-left">Packed Single Precision Floating Point</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SS</td>
<td class="org-left">Scalar Single Precision Floating Point</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">PD</td>
<td class="org-left">Packed Double Precision Floating Point</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SD</td>
<td class="org-left">Scalar Double Precision Floating Point</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">CMP</td>
<td class="org-left">Compare</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">STR</td>
<td class="org-left">String</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">EQ</td>
<td class="org-left">Equal</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">GT</td>
<td class="org-left">Greater</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SLL</td>
<td class="org-left">Shift Left Logical</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SRL</td>
<td class="org-left">Shift Right Logical</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SRA</td>
<td class="org-left">Shift Right Arithmetic</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">DUP</td>
<td class="org-left">Duplicate</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">WAM</td>
<td class="org-left">Wraparound Mode</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SSM</td>
<td class="org-left">Signed Saturation Mode</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">USM</td>
<td class="org-left">Unsigned Saturation Mode</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">RCP</td>
<td class="org-left">Reciprocal.RCP(x)=1/x</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SQRT</td>
<td class="org-left">Square Root</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">RSQRT</td>
<td class="org-left">Reciprocal Square Root</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">MSK</td>
<td class="org-left">Mask</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">CVT</td>
<td class="org-left">Convert</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SX</td>
<td class="org-left">Signed Extend</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">ZX</td>
<td class="org-left">Zero Extend</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">ROUND</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">UNPCK</td>
<td class="org-left">Unpack</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">EXTR</td>
<td class="org-left">Extract</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">INSR</td>
<td class="org-left">Insert</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">AND</td>
<td class="org-left">a &amp;&amp; b</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">OR</td>
<td class="org-left">a or b</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">NAND</td>
<td class="org-left">!(a &amp;&amp; b)</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">XOR</td>
<td class="org-left">a ^ b</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SAD</td>
<td class="org-left">Sum of Absolute Difference.</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">SIGN</td>
<td class="org-left">SIGN(src,dst)=if(src&lt;0):dst=-dst</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">MADD</td>
<td class="org-left">MADD((a00,a01),(b00,b01))=(a00*b00)+(a01*b01)</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">ALIGNR</td>
<td class="org-left">ALIGNR(src,dst,imm)=(src,dst) &gt;&gt; imm</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">AVG</td>
<td class="org-left">Average</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">ABS</td>
<td class="org-left">Absolute</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">NT</td>
<td class="org-left">NonTemporal</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">CVTT</td>
<td class="org-left">Convert With Truncate</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">UNPCKH</td>
<td class="org-left">UNPCKH((s00,s01),(d00,d01))=(d01,s01)</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">UNPCKL</td>
<td class="org-left">UNPCKL((s00,s01),(d00,d01))=(d00,s00)</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">MSB</td>
<td class="org-left">Most Significant Bit</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">LF</td>
<td class="org-left">Lowest Float</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">LF2</td>
<td class="org-left">Lower 2 Floats</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">LF4</td>
<td class="org-left">Lower 4 Floats</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">HF</td>
<td class="org-left">Highest Float</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">HF2</td>
<td class="org-left">Higher 2 Floats</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">LD</td>
<td class="org-left">Lowest Double</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">HD</td>
<td class="org-left">Highest Double</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">LDW</td>
<td class="org-left">Lower Double Word</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">LDW2</td>
<td class="org-left">Lower 2 Double Words</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">LDW4</td>
<td class="org-left">Lower 4 Double Words</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">LW</td>
<td class="org-left">Lower Word</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">HW</td>
<td class="org-left">Higher Wword</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">GPR</td>
<td class="org-left">General Purpose Resgister</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<p>
这里有几点需要注意的
</p>
<ul class="org-ul">
<li>对于Move如果使用了错误类型指令的话,会产生性能消耗.Vol.1 11.6.9</li>
<li>对于使用SIMD来说,推荐使用caller-save.Vol.1 11.6.10.3</li>
</ul>
</div>
</div>
</div>
<div id="content"><!-- DISQUS BEGIN --><div id="disqus_thread"></div><script>/***  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/var disqus_config = function () {this.page.url = 'https://maypeppa.github.io/html/simd.html';this.page.identifier = 'simd.html';};(function() {var d = document, s = d.createElement('script');s.src = 'https://dirlt.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);})();</script><noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><!-- DISQUS END --></div></body>
</html>
